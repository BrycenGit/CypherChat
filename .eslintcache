[{"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\index.js":"1","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\reportWebVitals.js":"2","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\firebase.js":"3","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\reducers\\index.js":"4","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\App.js":"5","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\MessagesControl.js":"6","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\SignOut.js":"7","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\NewMessageForm.js":"8","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\SignIn.js":"9","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\MessagesList.js":"10","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\Message.js":"11","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\Chats.js":"12"},{"size":1166,"mtime":1608175761915,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":520,"mtime":1608176305692,"results":"16","hashOfConfig":"14"},{"size":315,"mtime":1608004372957,"results":"17","hashOfConfig":"14"},{"size":201,"mtime":1608247785737,"results":"18","hashOfConfig":"14"},{"size":1248,"mtime":1608244633760,"results":"19","hashOfConfig":"14"},{"size":441,"mtime":1608177115817,"results":"20","hashOfConfig":"14"},{"size":2120,"mtime":1608244495377,"results":"21","hashOfConfig":"14"},{"size":2456,"mtime":1608183890301,"results":"22","hashOfConfig":"14"},{"size":1236,"mtime":1608244611937,"results":"23","hashOfConfig":"14"},{"size":360,"mtime":1608183870046,"results":"24","hashOfConfig":"14"},{"size":1844,"mtime":1608248862354,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"15tkkdi",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\index.js",[],["53","54"],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\reportWebVitals.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\firebase.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\reducers\\index.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\App.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\MessagesControl.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\SignOut.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\NewMessageForm.js",["55"],"import { useFirestore, useFirestoreConnect, isLoaded } from 'react-redux-firebase'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction NewMessageForm(props) {\r\n  \r\n  const firestore = useFirestore();\r\n\r\n  const { user } = props;\r\n\r\n  useFirestoreConnect([{ \r\n    collection: 'users'\r\n  }])\r\n\r\n  const usersList = useSelector(state => state.firestore.ordered.users);\r\n\r\n  const messagesRef = firestore.collection('messages')\r\n\r\n  function getUsers() {\r\n    firestore.collection(\"users\").get().then(function(querySnapshot) {\r\n      querySnapshot.forEach(function(doc) {\r\n          // doc.data() is never undefined for query doc snapshots\r\n          console.log(doc.id, \" => \", doc.data());\r\n      });\r\n    });\r\n    return console.log('hello')\r\n  }\r\n\r\n  function addMessageToFirestore(e) {\r\n    e.preventDefault();\r\n    \r\n    return messagesRef.add(\r\n      {\r\n        title: e.target.title.value,\r\n        body: e.target.body.value,\r\n        chat: [user.email, e.target.recipientEmail.value],\r\n        sender: user.email,\r\n        recipient: e.target.recipientEmail.value,\r\n        timeOpen: firestore.FieldValue.serverTimestamp()\r\n        \r\n      }\r\n    )\r\n  }\r\n  if (isLoaded(usersList)) {\r\n    return (\r\n      <>\r\n      <h1>New Message Form</h1>\r\n      <form onSubmit={addMessageToFirestore}>\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input name=\"title\" type=\"text\" />\r\n        <br />\r\n        <label htmlFor=\"body\">Body</label>\r\n        <input name=\"body\" type=\"text\" />\r\n        <br />\r\n        <label htmlFor=\"recipientEmail\">Recipient Email</label>\r\n        {/* <input name=\"recipientEmail\" type=\"text\" /> */}\r\n        {usersList.map((user)=>{\r\n          return (<div key={user.id}>\r\n            <input name=\"recipientEmail\" type=\"radio\" value={user.email} />\r\n            <label htmlFor={user.email} >{user.email}</label>\r\n            <br />\r\n          </div>)\r\n        })}\r\n        <br />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <p>Loading...</p>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default NewMessageForm;\r\n","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\SignIn.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\MessagesList.js",["56"],"import { useSelector } from 'react-redux'\r\nimport { useFirestore, useFirestoreConnect, isLoaded } from 'react-redux-firebase'\r\nimport Message from './Message';\r\n\r\n\r\n\r\nfunction MessagesList(props) {\r\n  const { user } = props;\r\n  const firestore = useFirestore();\r\n  useFirestoreConnect([{ \r\n    collection: 'messages'\r\n  }])\r\n\r\n  const messagesList = useSelector(state => state.firestore.data.messages);\r\n\r\n  const getMessages = () => {\r\n    var messages = [];\r\n    firestore.collection(\"messages\").where(\"sender\", \"==\", user.email)\r\n    .onSnapshot((q) => {\r\n        \r\n        q.forEach(function(doc) {\r\n            messages.push(doc.data());\r\n        });\r\n    });\r\n    return console.log(messages);\r\n  }\r\n\r\n  if (isLoaded(messagesList)) {\r\n    // const myMessagesList = messagesList.filter(msg => msg.recipient === user.email)\r\n    return (\r\n      <>\r\n        <h1>message List</h1>\r\n        {Object.values(messagesList).map((msg) => {\r\n          return <Message user={user} sender={msg.sender} recipient={msg.recipient} title={msg.title} body={msg.body} id={msg.id} key={msg.id} />\r\n        })}\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <p>Loading...</p>\r\n      </>\r\n   ) \r\n  }  \r\n}\r\n\r\nexport default MessagesList;","C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\Message.js",[],"C:\\Users\\Brycen\\Desktop\\capstone-chat\\src\\components\\Chats.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":18,"column":12,"nodeType":"63","messageId":"64","endLine":18,"endColumn":20},{"ruleId":"61","severity":1,"message":"65","line":16,"column":9,"nodeType":"63","messageId":"64","endLine":16,"endColumn":20},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'getUsers' is defined but never used.","Identifier","unusedVar","'getMessages' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]